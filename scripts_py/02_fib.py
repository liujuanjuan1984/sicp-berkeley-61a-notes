#!/usr/bin/python
# -*- coding: UTF-8 -*-

"""
practice by python for lessone 02

需求：求取斐波那契数列第n个数的值

斐波那契数列以 0、1 开始，每个数都是前一位和前前一位两个数之和，即 0、1、1、2、3、5、8、13、...

本脚本采用了三个思路来实现，并对比了不同实现方式的计算性能

"""

import time
import os
import json


def main():

    for n in [10, 100, 1000, 3000, 5000]:
        start = time.time()
        r1 = fib_memory_flash(n)
        end = time.time()
        print(f"内存方法求取：第 {n} 个斐波那契数列的值为 {r1}，耗时 {end-start} 秒")

    for n in [10, 100, 1000, 3000, 5000]:
        start = time.time()
        r1 = fib_memory_disk(n)
        end = time.time()
        print(f"文件存储的方法求取：第 {n} 个斐波那契数列的值为 {r1}，耗时 {end-start} 秒")

    for n in [10, 30, 40, 50]:
        start = time.time()
        r1 = fib_recurse(n)
        end = time.time()
        print(f"递归方法求取：第 {n} 个斐波那契数列的值为 {r1}，耗时 {end-start} 秒")


def fib_recurse(n):
    """采用递归的方式求值"""
    if n < 2:
        return n
    return fib_recurse(n - 1) + fib_recurse(n - 2)


def fib_memory_flash(n):
    """采用缓存（内存，不永久）的方式求值"""
    data = {0: 0, 1: 1, 2: 1}
    for i in range(n + 1):
        if i not in data:
            data[i] = data[i - 1] + data[i - 2]
    return data[n]


def fib_memory_disk(n):
    """采用硬盘存储的方式求值"""

    datafile = "./scripts_py/02_fib.json"
    if not os.path.exists(datafile):
        data = {0: 0, 1: 1, 2: 1}
    else:
        with open(datafile, "r", encoding="utf-8") as f:
            data = json.load(f)

    new = {int(i): data[i] for i in data}

    for i in range(n + 1):
        if i not in new:
            new[i] = new[i - 1] + new[i - 2]

    with open(datafile, "w", encoding="utf-8") as f:
        json.dump(new, f)
    return new[n]


if __name__ == "__main__":
    main()

"""
存储的方式都相当快，递归从40个往后就显著特别慢了

内存方法求取：第 10 个斐波那契数列的值为 55，耗时 0.0 秒
内存方法求取：第 100 个斐波那契数列的值为 354224848179261915075，耗时 0.0 秒
内存方法求取：第 1000 个斐波那契数列的值为 43466557686937456435688527675040625802564660517371780402481729089536555417949051890403879840079255169295922593080322634775209689623239873322471161642996440906533187938298969649928516003704476137795166849228875，耗时 0.0009968280792236328 秒
内存方法求取：第 3000 个斐波那契数列的值为 410615886307971260333568378719267105220125108637369252408885430926905584274113403731330491660850044560830036835706942274588569362145476502674373045446852160486606292497360503469773453733196887405847255290082049086907512622059054542195889758031109222670849274793859539133318371244795543147611073276240066737934085191731810993201706776838934766764778739502174470268627820918553842225858306408301661862900358266857238210235802504351951472997919676524004784236376453347268364152648346245840573214241419937917242918602639810097866942392015404620153818671425739835074851396421139982713640679581178458198658692285968043243656709796000，耗时 0.001995086669921875 秒
内存方法求取：第 5000 个斐波那契数列的值为，耗时 0.001994609832763672 秒
文件存储的方法求取：第 10 个斐波那契数列的值为 55，耗时 0.007979154586791992 秒
文件存储的方法求取：第 100 个斐波那契数列的值为 354224848179261915075，耗时 0.0059850215911865234 秒
文件存储的方法求取：第 1000 个斐波那契数列的值为 43466557686937456435688527675040625802564660517371780402481729089536555417949051890403879840079255169295922593080322634775209689623239873322471161642996440906533187938298969649928516003704476137795166849228875，耗时 0.006016969680786133 秒
文件存储的方法求取：第 3000 个斐波那契数列的值为，耗时 0.06580090522766113 秒
文件存储的方法求取：第 5000 个斐波那契数列的值为，耗时 0.0918281078338623 秒
递归方法求取：第 10 个斐波那契数列的值为 55，耗时 0.0009996891021728516 秒
递归方法求取：第 30 个斐波那契数列的值为 832040，耗时 0.33311033248901367 秒
递归方法求取：第 40 个斐波那契数列的值为 102334155，耗时 40.62239456176758 秒


"""
